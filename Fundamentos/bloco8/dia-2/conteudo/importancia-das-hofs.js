// Imagine que voc√™ tem um array de objetos. Cada objeto √© um estudante com seu nome, nota e situa√ß√£o no curso. Para ser aprovado, ele precisa obter uma nota acima de 60. Como voc√™ pode ver, o objeto abaixo est√° desatualizado e precisa ser atualizado: ele n√£o cont√©m a informa√ß√£o acerca da aprova√ß√£o. Para atualiz√°-lo, voc√™ provavelmente escreveria algo assim, utilizando loops:

const students = [
  { name: "Maria", grade: 70, approved: "" },
  { name: "Jos√©", grade: 56, approved: "" },
  { name: "Roberto", grade: 90, approved: "" },
  { name: "Ana", grade: 81, approved: "" },
];

function verifyGrades() {
  for (let i = 0; i < students.length; i += 1) {
    const student = students[i];
    if (student.grade >= 60) {
      student.approved = "Aprovado";
    } else {
      student.approved = "Recupera√ß√£o";
    }
  }
}

verifyGrades();

console.log(students);

// Usando forEach, √© assim que voc√™ faria a mesma coisa:

function verifyGrades() {
  students.forEach((student, index) => {
    if (student.grade >= 60) {
      students[index].approved = "Aprovado";
    } else {
      students[index].approved = "Recupera√ß√£o";
    }
  });
}

verifyGrades();

console.log(students);

// Ok, as duas abordagens geram o mesmo resultado, mas qual a diferen√ßa? Vamos analisar as duas solu√ß√µes e ver em que elas diferem!

// Na solu√ß√£o usando for, voc√™ vai precisar se preocupar mais com os detalhes durante a implementa√ß√£o de sua l√≥gica de execu√ß√£o e menos com a solu√ß√£o do problema que voc√™ deseja solucionar - voc√™ s√≥ quer atualizar uma propriedade de cada estudante, afinal. Voc√™ precisa:

// - Declarar uma vari√°vel para controlar a itera√ß√£o pelo array;
// - Inicializar essa vari√°vel com zero, a primeira posi√ß√£o do array;
// - Controlar o ponto de parada, quando o fim do array foi alcan√ßado (index < students.length);
// - Incrementar manualmente a vari√°vel de controle do loop a cada itera√ß√£o (index += 1);
// - Usar indexa√ß√£o de arrays pra acessar cada elemento/estudante (students[index]);
// - Ufa! Tudo isso s√≥ pra atualizar o seu array!

// Agora vamos olhar para a segunda solu√ß√£o. Tudo o que voc√™ precisa fazer √© chamar a fun√ß√£o forEach no array e passar para ela a fun√ß√£o que voc√™ criou. E mais nada! Esse √© o poder da fun√ß√£o forEach. üòé

// Ainda n√£o est√° convencido? Ent√£o vamos a mais um exemplo. Queremos encontrar e imprimir no console o primeiro elemento de um array que satisfa√ßa a uma determinada condi√ß√£o. Pode ser, por exemplo, encontrar o primeiro n√∫mero que seja divis√≠vel por 5 em uma lista de n√∫meros.

// Primeiro, usando for e if:

const numbers = [11, 24, 39, 47, 50, 62, 75, 81, 96, 100];
let firstMultipleOf5;
for (let index = 0; index < numbers.length; index += 1) {
  if (numbers[index] % 5 === 0) {
    firstMultipleOf5 = numbers[index];
    break;
  }
}

console.log(firstMultipleOf5); // 50

// Agora, a mesma coisa usando Array.find:

const xablau = numbers.find((number) => number % 5 === 0);
console.log(xablau);

// Al√©m de muito mais concisa, a solu√ß√£o usando find √© muito mais f√°cil de entender, concorda?

// Ponto de observa√ß√£o: note que o par√¢metro passado para numbers.find(), number => number % 5 == 0, √© uma arrow function, igual no primeiro exemplo de forEach, em que foi passada a fun√ß√£o verifyGrade.

// Mas essa ideia de passar uma arrow function para uma fun√ß√£o ainda est√° pouco clara, n√£o √© mesmo? E esse par√¢metro que ela recebe, vem de onde?! Quem passa? Agora vamos ver, em detalhes, a estrutura de uma HOF.
