// Exemplo 1: Tratando erros de forma sÃ­ncrona.

function dividirNumeros(num1, num2) {
  if (num2 == 0) throw new Error('NÃ£o pode ser feito uma divisÃ£o por zero');

  return num1 / num2;
}

try {
  const resultado = dividirNumeros(2, 1);
  console.log(`resultado: ${resultado}`);
} catch (e) {
  console.log(e.message);
}

// Exemplo 2: Tratando erros de forma assÃ­ncrona.

function dividirNumeros(num1, num2) {
  const promise = new Promise((resolve, reject) => {
    if (num2 == 0) reject(new Error('NÃ£o pode ser feito uma divisÃ£o por zero'));

    const resultado = num1 / num2;
    resolve(resultado);
  });

  return promise;
}

dividirNumeros(2, 1)
  .then((result) => console.log(`sucesso: ${result}`))
  .catch((err) => console.log(`erro: ${err.message}`));

// FunÃ§Ãµes Async/Await

function dividirNumeros2(num1, num2) {
  const promise = new Promise((resolve, reject) => {
    if (num2 == 0) reject(new Error('NÃ£o pode ser feito uma divisÃ£o por zero'));

    const resultado = num1 / num2;
    resolve(resultado);
  });

  return promise;
}

//Precisamos ter bastante atenÃ§Ã£o aqui ðŸ˜³! A funÃ§Ã£o que fizer a chamada da Promise
// dividirNumeros (ou qualquer outra funÃ§Ã£o que retorne uma Promise) deve ser definida
// como async, conforme o exemplo a seguir:

const doSomething = async () => {
  console.log(await dividirNumeros2(2, 2));
};

// As funÃ§Ãµes async podem ser encadeadas facilmente e, alÃ©m disso, seu
// cÃ³digo serÃ¡ muito mais legÃ­vel, se comparado ao uso de Promises.
// Veja o exemplo a seguir:

const promiseParaFazerAlgumaCoisa = () => {
  return new Promise((resolve) => {
    setTimeout(() => resolve('Eu fiz alguma coisa'), 2000);
  });
};

const assistirAlguemFazendoAlgumaCoisa = async () => {
  const something = await promiseParaFazerAlgumaCoisa();
  return something + '\n e Eu vi vocÃª fazendo';
};

const AssistirAlguemAssistindoAlguemFazendoAlgumaCoisa = async () => {
  const something = await assistirAlguemFazendoAlgumaCoisa();
  return something + '\n e Eu tambÃ©m vi vocÃª vendo ele fazendo';
};

// a funÃ§Ã£o xablau foi feita por este que escreve
const xablau = async () => {
  const ehMesmo = await AssistirAlguemAssistindoAlguemFazendoAlgumaCoisa();
  return ehMesmo + '\n XABLAU';
};

xablau().then((res) => {
  console.log(res);
});
