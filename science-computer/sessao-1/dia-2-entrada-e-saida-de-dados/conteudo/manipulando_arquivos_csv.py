# O formato CSV (Comma Separated Values) √© muito comum em exporta√ß√µes de planilhas de dados e base de dados. Foi utilizado por muito tempo antes de sua defini√ß√£o formal, o que gerou uma despadroniza√ß√£o deste formato e o surgimento de v√°rios dialetos.

# Cada dialeto tem seus pr√≥prios delimitadores e caracteres de cita√ß√£o, por√©m o formato geral √© semelhante o suficiente para utilizarmos o mesmo m√≥dulo para este processamento.

# Ainda que seu nome indique que o delimitador seja a ‚Äú,‚Äú (v√≠rgula), existem varia√ß√µes que utilizam ‚Äú;‚Äú (ponto e v√≠rgula) ou at√© mesmo tabula√ß√µes (‚Äú\t‚Äú).

# üé≤ Sem d√∫vidas, an√°lise de dados √© o que se destaca quando estamos falando sobre manipular arquivos CSV. 
# link: https://lms-assets.betrybe.com/lms/graduacao_unb.csv

# Vamos analisar uma base de dados a respeito dos cursos de gradua√ß√£o oferecidos pela Universidade de Bras√≠lia (UnB). O arquivo utilizado √© o graduacao_unb.csv.

# üí° Para fazer o exemplo, cole o arquivo graduacao_unb.csv na raiz do diret√≥rio em que estar√° o seu script.

# O m√≥dulo csv, cont√©m duas principais fun√ß√µes:

# Um leitor (reader) que nos ajuda a ler o conte√∫do, j√° fazendo as transforma√ß√µes dos valores para Python;

# E um escritor (writer) para facilitar a escrita nesse formato.




"""
import csv

with open("graduacao_unb.csv", encoding = 'utf-8') as file:
    graducacao_reader = csv.reader(file, delimiter=',', quotechar='"')
    header, *data = graducacao_reader


# O leitor define como dialeto padr√£o excel, o que significa dizer que o delimitador de campos ser√° ‚Äú,‚Äú e o caractere de cita√ß√£o ser√° aspas duplas ("). Uma forma de modificar estes padr√µes √© definindo-os de forma diferente na cria√ß√£o do leitor. Al√©m disso, o leitor ir√° usar o decodificador padr√£o do sistema para decodificar em unicode o arquivo .csv. Para utilizar um decodificador diferente, deve ser passado o argumento encoding com o valor do decodificador esperado. Um leitor de .csv pode ser percorrido utilizando o la√ßo de repeti√ß√£o for e, a cada itera√ß√£o, retorna uma nova linha j√° transformada em uma lista Python com seus respectivos valores.

# Podemos fazer uma an√°lise e verificar quantos cursos s√£o ofertados por departamento. Em seguida salvamos o resultado tamb√©m no formato .csv:

group_by_department = {}

for row in data:
    department = row[15]
    if department not in group_by_department:
        group_by_department[department] = 0
    group_by_department[department] += 1

with open("department_report.csv", 'w', encoding='utf-8') as file:
    writer = csv.writer(file)

    headers = [
        "Departamento",
        "Total de cursos",
    ]
    writer.writerow(headers)

    for deparment, grades in group_by_department.items():
        row = [
            deparment,
            grades
        ]
        writer.writerow(row)

"""

# Existem ainda o leitor e o escritor baseados em dicion√°rios. A principal vantagem √© que n√£o precisamos manipular os √≠ndices para acessar os dados das colunas. A desvantagem √© o espa√ßo ocupado em mem√≥ria (que √© maior que o comum), devido √† estrutura de dados utilizada.


import csv

with open("graduacao_unb.csv", encoding='utf-8') as file:
    graduacao_reader = csv.DictReader(file, delimiter=',', quotechar='"')

    group_by_department = {}
    for row in graduacao_reader:
        department = row['unidade_responsavel']
        if department not in group_by_department:
            group_by_department[department] = 0
        group_by_department[department] += 1


with open("new_department_report.csv", "w", encoding="utf-8") as file:
    headers = [
        "Departamento", 
        "Total de Cursos"
    ]

    writer = csv.DictWriter(file, fieldnames=headers)
    writer.writeheader()

    for department, grades in group_by_department.items():
        row = {"Departamento": department, "Total de Cursos": grades}
        writer.writerow(row)